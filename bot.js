require("dotenv").config();
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { BaseScene, Stage } = Scenes;
const JiraClient = require("jira-client");
const admin = require("firebase-admin");
const path = require("path");
const ntpClient = require("ntp-client");
const moment = require("moment-timezone");

const serviceAccountPath = path.resolve(
  process.env.GOOGLE_APPLICATION_CREDENTIALS
);

// Check if the serviceAccount variable is already declared
if (!global.serviceAccount) {
  global.serviceAccount = require(serviceAccountPath);
}

// Initialize Firebase Firestore only if it hasn't been initialized yet
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(global.serviceAccount),
  });
}

const db = admin.firestore();

const bot = new Telegraf(process.env.BOT_TOKEN);

// Jira credentials and endpoint
const JIRA_BASE_URL = process.env.JIRA_BASE_URL;
const JIRA_API_TOKEN = process.env.JIRA_API_TOKEN;
const JIRA_PROJECT_KEY = process.env.JIRA_PROJECT_KEY;
const JIRA_EMAIL = process.env.JIRA_EMAIL;

// Initialize Jira client
const jira = new JiraClient({
  protocol: "https",
  host: JIRA_BASE_URL.replace("https://", ""),
  username: JIRA_EMAIL,
  password: JIRA_API_TOKEN,
  apiVersion: "2",
  strictSSL: true,
});

// Function to create a Jira ticket
const createJiraTicket = async (summary, description, additionalFields) => {
  try {
    const issue = await jira.addNewIssue({
      fields: {
        project: {
          key: JIRA_PROJECT_KEY,
        },
        summary,
        description,
        issuetype: {
          name: "Task",
        },
        ...additionalFields, // Add additional fields to the Jira issue
      },
    });
    return issue;
  } catch (error) {
    console.error("Error creating Jira ticket:", error);
    throw error;
  }
};

// Scenes for each step
const phoneScene = new BaseScene("phone");
const nameScene = new BaseScene("name");
const locationScene = new BaseScene("location");
const serviceScene = new BaseScene("service");
const descriptionScene = new BaseScene("description");

// Function to split array into chunks
const chunkArray = (array, chunkSize) => {
  const chunks = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    chunks.push(array.slice(i, i + chunkSize));
  }
  return chunks;
};

// Function to get network time
const getNetworkTime = () => {
  return new Promise((resolve, reject) => {
    ntpClient.getNetworkTime("pool.ntp.org", 123, (err, date) => {
      if (err) {
        reject(err);
      } else {
        resolve(date);
      }
    });
  });
};

// Function to format date and time for Jira
const jiraDateFormat = (dd) => {
  return dd.toISOString();
};

// Phone scene
phoneScene.enter((ctx) => {
  ctx.replyWithHTML(
    `­ЪЪа рЅхріЦрІЏрІЮрІјріЋ рѕѕрѕўрЅђрЅарѕЇ ріЦріЋрІ▓рѕерІ│ріЋ <b>"рѕхрѕЇріГ рЅЂрїЦрѕГрІјріЋ рІФрїІрѕЕ"</b> рІерѕџрѕѕрІЇріЋ рЅарѕўрїФріЋ рѕхрѕЇріГ рЅЂрїЦрѕГрІјріЋ рІФрїІрѕЕріЋ`,
    Markup.keyboard([Markup.button.contactRequest("рѕхрѕЇріГ рЅЂрїЦрѕГрІјріЋ рІФрїІрѕЕ")])
      .oneTime()
      .resize()
  );
});
phoneScene.on("contact", async (ctx) => {
  ctx.session.phone = ctx.message.contact.phone_number;
  await ctx.reply(`ріЦріЊрѕўрѕ░рїЇріЊрѕѕріЋ! рІерѕърЅБрІГрѕЇ рЅЂрїЦрѕГрІј рЅарЅ░рѕ│ріФ рѕЂріћрЅ│ рІ░рѕГрѕХріЊрѕЇ!`);
  await ctx.scene.enter("name");
});

// Name scene
nameScene.enter((ctx) => ctx.reply("­ЪЪа ріЦрЅБріГрІј рѕЎрѕЅ рѕхрѕЮрІјріЋ рІФрѕхрїѕрЅА"));
nameScene.on("text", async (ctx) => {
  ctx.session.name = ctx.message.text;
  await ctx.scene.enter("location");
});

// Location scene
locationScene.enter((ctx) => ctx.reply("­ЪЪа рЅБрѕѕрѕЎрІФ ріЦріЋрІ▓рѕІріГ рІерѕџрЇѕрѕЇрїЅрЅарЅхріЋ ріарІхрѕФрѕ╗ рІФрѕхрїѕрЅА"));
locationScene.on("text", async (ctx) => {
  ctx.session.location = ctx.message.text;
  await ctx.scene.enter("service");
});

const categoryMapping = {
  "Domestic Help": "­ЪЉЕ­ЪЈйРђЇ­ЪЇ│рЅ░рѕўрѕІрѕІрѕй рІерЅцрЅх рѕ░рѕФрЅ░ріЏ",
  "Technician & Maintenance": "­ЪЉе­ЪЈ╗РђЇ­ЪћДрІерїЦрїѕріЊ рЅБрѕѕрѕЎрІФ",
  "Technic & Vocational (TVET)": "­ЪЉиРђЇРЎѓ№ИЈрІерЅцрЅх ріЦрІхрѕ│рЅх рЅБрѕѕрѕЎрІФ",
  "Business Operation": "­Ъњ╝рѕѕрІхрѕГрїЁрЅх рЅБрѕѕрѕЎрІФрІјрЅй",
};

const serviceMapping = {
  "Cooking Maid": "рІерЅцрЅх рѕЮрїЇрЅЦ рѕ░рѕФрЅ░ріЏ",
  "Cleaning Maid": "рІерЅцрЅх рїйрІ│рЅх рѕ░рѕФрЅ░ріЏ",
  Catering: "рѕЮрїЇрЅЦ рІЮрїЇрїЁрЅх",
  Tutor: "ріарѕхрїаріџ",
  "Satellite Dish Tech": "рІерІ▓рѕй рЅ┤ріГріњрѕ║рІФріЋ",
  Electrician: "ріцрѕїріГрЅхрѕфрѕйрІФріЋ",
  Plumber: "рЅДріЋрЅД рѕ░рѕФрЅ░ріЏ",
  "Home Appliance Repair": "рЇЇрѕфрїЁрЇБ рѕЮрїБрІхрЇБ рѕЇрЅЦрѕх-рѕЏрїарЅбрІФ рїЦрїѕріЊ",
  "Electronics Repair": "рІеріцрѕїріГрЅхрѕ«ріњріГрѕх рїЦрїѕріЊ",
  Construction: "рїЇріЋрЅБрЅ│",
  Painter: "рЅђрѕѕрѕЮ рЅђрЅб",
  "Gypsum Works": "рІерїѓрЇЋрѕ░рѕЮ рѕхрѕФ",
  "Aluminium Works": "рІеріарѕЅрѕџріњрІерѕЮ рѕхрѕФ",
  Carpenter: "ріаріЊрї║",
  "Tiling Works": "рЅ│рІГрѕЇ ріЋрїБрЇЇ рѕхрѕФ",
  Accountant: "рІерѕњрѕ│рЅЦ рЅБрѕѕрѕЎрІФ",
  Salesman: "рІерѕйрІФрїГ рѕ░рѕФрЅ░ріЏ",
  Receptionist: "ріЦріЋрїЇрІ│ рЅ░рЅђрЅБрІГ",
  Secretary: "рЇђрѕЃрЇі",
  Cashier: "ріФрѕИрѕГ",
};

serviceScene.enter(async (ctx) => {
  try {
    // Send a loading message
    const loadingMessage = await ctx.reply("РЈ│ ріЦрЅБріГрІј рЅхріЋрѕй рІГрЅ│рїѕрѕ▒ріЋ...");

    // Fetch data from Firestore
    const serviceDoc = await db
      .collection("services")
      .doc("gooday_headline_services")
      .get();

    if (!serviceDoc.exists) {
      console.error("Service document does not exist.");
      return;
    }

    const categories = serviceDoc.data().services || [];
    if (categories.length === 0) {
      console.error("No categories found in the document.");
      return;
    }

    // Update the message with the fetched categories
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMessage.message_id,
      null,
      "­ЪЪа ріЦрЅБріГрІј рЅарЅЁрІхрѕџрІФ рІеріарїѕрѕЇрїЇрѕјрЅх рІўрѕГрЇЇ рІГрѕЮрѕерїА",
      Markup.inlineKeyboard(
        chunkArray(
          categories.map((category) =>
            Markup.button.callback(
              categoryMapping[category.category] || category.category,
              `category_${category.category}`
            )
          ),
          2
        )
      )
        .oneTime()
        .resize()
    );
  } catch (error) {
    console.error("Error fetching services:", error);
  }
});

serviceScene.on("callback_query", async (ctx) => {
  const selectedCategory = ctx.callbackQuery.data;

  if (selectedCategory.startsWith("category_")) {
    const categoryName = selectedCategory.replace("category_", "");

    try {
      const serviceDoc = await db
        .collection("services")
        .doc("gooday_headline_services")
        .get();

      if (!serviceDoc.exists) {
        console.error("Service document does not exist.");
        return;
      }

      const categories = serviceDoc.data().services || [];
      const category = categories.find((cat) => cat.category === categoryName);

      if (!category) {
        console.error("Selected category not found.");
        return;
      }

      ctx.session.selectedCategory = categoryName;

      await ctx.reply(
        `­ЪЪа ріерѕўрѕерїАрЅх ${
          categoryMapping[categoryName] || categoryName
        } рІЇрѕхрїЦ рІерѕџрЇѕрѕЇрїЅрЅхріЋ рІерЅБрѕѕрѕЎрІФ ріарІГріљрЅх рІГрѕЮрѕерїА`,
        Markup.inlineKeyboard(
          chunkArray(
            category.services.map((service) =>
              Markup.button.callback(
                serviceMapping[service] || service,
                `service_${service}`
              )
            ),
            2
          )
        )
          .oneTime()
          .resize()
      );
    } catch (error) {
      console.error("Error fetching services:", error);
    }
  } else if (selectedCategory.startsWith("service_")) {
    const selectedService = selectedCategory.replace("service_", "");
    ctx.session.selectedService = selectedService;

    await ctx.reply(
      `рІерїарІерЅЂрЅх рЅБрѕѕрѕЎрІФ: ${serviceMapping[selectedService] || selectedService}`
    );
    ctx.scene.enter("description");
  }
});

// Description scene
descriptionScene.enter((ctx) =>
  ctx.reply("­ЪЪа рЅЦрЅЂ рІерѕєріљ рЅБрѕѕрѕърІФ рѕѕрѕўрѕЮрѕерїЦ ріЦріЋрІ▓рѕерІ│ріЋ рѕхрѕѕрѕхрѕФрІЇ рїЦрЅѓрЅх рѕЏрЅЦрѕФрѕфрІФ рІГрї╗рЇЅ")
);
descriptionScene.on("text", async (ctx) => {
  ctx.session.description = ctx.message.text;

  // Getting Service Request Time
  const serviceRequestTime = await getNetworkTime();
  const formattedServiceRequestTime = jiraDateFormat(serviceRequestTime);

  const requestDetails = `
    рѕЎрѕЅ рѕхрѕЮ: ${ctx.session.name}
    ріарІхрѕФрѕ╗: ${ctx.session.location}
    рІерїарІерЅЂрЅх ріарїѕрѕЇрїЇрѕјрЅх: ${
      serviceMapping[ctx.session.selectedService] || ctx.session.selectedService
    }
    рІеріарїѕрѕЇрїЇрѕјрЅх рѕЏрЅЦрѕФрѕфрІФ: ${ctx.session.description}
    рѕхрѕЇріГ рЅЂрїЦрѕГ: ${ctx.session.phone}
  `;

  // Create a Jira ticket
  try {
    const summary = `${ctx.session.selectedService}`;
    const description = `${ctx.session.description}`;
    const additionalFields = {
      customfield_10035: ctx.session.name,
      customfield_10036: ctx.session.phone,
      customfield_10038: ctx.session.location,
      customfield_10034: ctx.session.selectedService,
      customfield_10045: formattedServiceRequestTime,

      // Test (Personal KAN Project)
      // customfield_10031: ctx.session.name,
      // customfield_10035: ctx.session.location,
      // customfield_10034: ctx.session.phone,
      // customfield_10036: ctx.session.selectedService,
      // customfield_10039: formattedServiceRequestTime,
    };

    const jiraResponse = await createJiraTicket(
      summary,
      description,
      additionalFields
    );

    // Get Current hour
    const currentHour = serviceRequestTime.getHours();

    // Defining our working hour
    const startHour = 7;
    const endHour = 18;

    // Determine message based on current time
    let confirmationMessage;
    if (currentHour >= startHour && currentHour < endHour) {
      confirmationMessage = `рІерІ░ріЋрЅаріЏ рїЇрѕЇрїІрѕјрЅх рЅБрѕѕрѕЎрІФрІјрЅ╗рЅйріЋ рЅа 10 рІ░рЅѓрЅЃ рІЇрѕхрїЦ рЅхріЦрІЏрІЮрІјріЋ рѕЏрѕхрЅ░ріЊрїѕрІх рІГрїђрѕЮрѕФрѕЅрЇб`;
    } else {
      confirmationMessage = `рІГрѕЁ рІеріарїѕрѕЇрїЇрѕјрЅх рЅхріЦрІЏрІЮ рІерїѕрЅБрІЇ ріерѕўрІ░рЅаріЏ рІерѕхрѕФ рѕ░рІЊрЅх(ріерїарІІрЅх 1 рѕ░рІЊрЅх - ріерѕЮрѕйрЅ▒ 12 рѕ░рІЊрЅх) рІЇрїф ріљрІЇрЇб\b\b рЅхріЦрІЏрІЮрІј рІерѕџрѕхрЅ░ріЊрїѕрІ░рІЇ рЅарѕхрѕФ рѕ░рІЊрЅх ріљрІЇрЇб`;
    }

    await ctx.replyWithHTML(
      `рЅ░рѕ│ріГрЅирѕЇ! рЅхріЦрІЏрІЮрІјріЋ рЅ░рЅђрЅЦрѕѕріЊрѕЇ.\n <b>${requestDetails}</b>\n\n ${confirmationMessage}\n\n <b>рІеріарїѕрѕЇрїЇрѕјрЅх рЅхрІЋрІЏрІЮ рЅЂрїЦрѕГрІј:</b> ${jiraResponse.key}\n\n рЅБрѕхрїѕрЅАрЅх рІеріарїѕрѕЇрїЇрѕјрЅх рїЦрІФрЅё рѕІрІГ рЅ░рїерѕЏрѕф рѕЏрЅЦрѕФрѕфрІФ ріФрѕхрЇѕрѕѕрїѕріЋ ріЦріЋрІ░рІЇрѕЇрѕјрЅ│рѕѕріЋрЇб\n\nрїЅрІ│рІГріЋ рѕхрѕѕрѕўрѕерїА ріЦріЊрѕўрѕ░рїЇріЊрѕѕріЋ!`
    );
  } catch (error) {
    await ctx.reply("рїЦрІФрЅёрІјріЋ рЅаріарїЇрЅБрЅА рѕўрЅђрЅарѕЇ ріарѕЇрЅ░рЅ╗рѕѕрѕЮрЇб ріЦрЅБріГрІјріЋ ріЦріЋрІ░рїѕріЊ рІГрѕъріГрѕЕ!");
    console.error("Error creating Jira ticket:", error);
  }

  ctx.scene.leave();
});

// Stage
const stage = new Stage([
  phoneScene,
  nameScene,
  locationScene,
  serviceScene,
  descriptionScene,
]);

bot.use(session());
bot.use(stage.middleware());

// Function to create statrt Menu message
const getStartMenuMessage = (userName) => {
  return {
    text: `рѕ░рѕІрѕЮ ${userName}! ­ЪЉІріЦріЋрі│ріЋ рІѕрІ░ GoodayOn рЅдрЅх рЅарІ░рѕЁріЊ рѕўрїА!\n\n­ЪњЂGoodayOn рѕЏріЋріљрЅ│рЅИрІЇ ріЦріЊ рІерѕЎрІФ рЅЦрЅЃрЅ│рЅИрІЇ рІерЅ░рѕерїІрїѕрїа рЅБрѕѕрѕърІФрІјрЅйріЋ рЅарЅђрѕІрѕЅ рѕЏрїЇріўрЅх рІерѕџрІФрѕхрЅйрѕЇ рЅђрѕЇрїБрЇІ ріарїѕрѕЇрїЇрѕјрЅх ріљрІЇ\n\nРЮЄ№ИЈ Request for Service Provider - рЅБрѕѕрѕЎрІФ рѕѕрѕЏрІўрІЮ\n\nРЮЄ№ИЈ Information - рѕхрѕѕ GoodayOn рѕўрѕерїЃ рѕѕрѕЏрїЇріўрЅх`,
    keyboard: Markup.keyboard([
      ["Request for Service Provider", "Information"],
    ]).resize(),
  };
};

bot.start((ctx) => {
  const userName = ctx.from.first_name;
  const startMenuMessage = getStartMenuMessage(userName);
  ctx.replyWithHTML(startMenuMessage.text, startMenuMessage.keyboard);
});

bot.hears("Request for Service Provider", (ctx) => ctx.scene.enter("phone"));

bot.hears("Information", (ctx) => {
  ctx.replyWithHTML(
    `­Ъїљ <b>Company Website(рІхрѕе-рїѕрїй):</b> <a href="https://gooday.io">gooday.io</a>\n\n­ЪЊъ <b>Call Center(рі«рѕЇ-рѕ┤ріЋрЅ░рѕГ):</b> 9675\n\n<b>­ЪЊЇOffice Address(ріарІхрѕФрѕ╗)</b>: Gotera Pepsi\n\n ­ЪЊ▒ <b>Download Our App(рІерїЅрІ│рІГ рѕўрЅ░рїЇрЅарѕфрІФріЋ рѕѕрѕЏрІѕрѕерІх):</b>\n\n<a href="https://play.google.com/store/apps/details?id=ai.gooday.goodayon">Google Play</a> | <a href="https://apps.apple.com/us/app/goodayon/id1521933697">App Store</a>`,
    Markup.keyboard([["Back"]]).resize()
  );
});

bot.hears("Back", (ctx) => {
  const userName = ctx.from.first_name;
  const startMenuMessage = getStartMenuMessage(userName);
  ctx.replyWithHTML(startMenuMessage.text, startMenuMessage.keyboard);
});

// Launch the bot
bot
  .launch()
  .then(() => {
    console.log("Bot is running...");
  })
  .catch((err) => {
    console.error("Bot startup error:", err);
  });

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
